#================= Material Stiffness ==================================
#
#    Computes material stiffness tensor C_{ijkl} 
#    Currently coded either for plane strain or general 3D.


This is a Matlab function for computing the material stiffness tensor "C" for a hyperelastic material. The function takes in four inputs: "ndof" (the number of degrees of freedom), "ncoord" (the number of spatial dimensions, either 2 for plane strain or 3 for general 3D), "B" (the strain tensor), "J" (the determinant of the deformation gradient), and "materialprops" (a vector containing the material properties, specifically the shear modulus "mu1" and the bulk modulus "K1").

The function first initializes the Lame constants "mu1" and "K1" using the "materialprops" input. It also initializes the identity tensor "dl" which represents the direction cosines between the undeformed and deformed coordinate systems.

The function then calculates the material stiffness tensor "C" using either a 2D or 3D calculation depending on the value of "ncoord". The calculation is based on the neo-Hookean constitutive model, which states that the stress-strain relationship for a hyperelastic material is given by a function of the strain energy density and the first and second invariants of the strain tensor.

In the 2D calculation, the variable "Bqq" is initialized as the sum of the components of the strain tensor plus 1. The material stiffness tensor is then calculated using a nested for loop structure, summing over the indices i, j, k, and l.

In the 3D calculation, the variable "Bqq" is initialized as the sum of the components of the strain tensor. The material stiffness tensor is then calculated in the same manner as in the 2D calculation, using a nested for loop structure.

At the end of the function, the material stiffness tensor "C" is returned as the output.



#================= Stress ==================================
#
#   Computes stress sigma_{ij} given B_{ij}


The function Kirchhoffstress computes the stress tensor sigma_{ij} for a hyperelastic (Neo-Hookean) material in 2D (plane strain only) or 3D. The input to the function includes:

ndof: number of degrees of freedom, which can be either 2 or 3.
ncoord: number of spatial dimensions, which can be either 2 or 3.
B: the Biot strain tensor B_{ij}.
J: the determinant of the deformation gradient.
materialprops: a vector of material properties, which contains two values: mu1 (first Lame parameter) and K1 (bulk modulus).
The stress tensor is computed based on the Neo-Hookean model, which describes a hyperelastic material. The formula used to compute the stress tensor is:

$$\sigma_{ij} = \mu_1 \left(B_{ij} - \frac{B_{kk} \delta_{ij}}{3}\right)J^{-\frac{2}{3}} + K_1(J-1)J\delta_{ij}$$

Where B_{kk} is the trace of the Biot strain tensor, and $\delta_{ij}$ is the Kronecker delta. The stress tensor is initialized as an array of zeros and then the values are computed using the above formula and stored in the stress variable, which is the output of the function.



#====================== No. integration points =============================
#
#   Defines the number of integration points:be used for
#   each element type


This function determines the number of integration points that should be used for a particular element, depending on the number of coordinates (1D, 2D, or 3D) and the number of nodes per element (e.g. 3, 6, 4, 8).

In 1D, the number of integration points is equal to the number of nodes per element.
In 2D, the number of integration points is 1, 3, 4, or 9, depending on whether the element has 3, 6, 4, or 8 nodes, respectively.
In 3D, the number of integration points is 1, 4, 8, or 27, depending on whether the element has 4, 10, 8, or 20 nodes, respectively.



#====================== INTEGRATION POINTS ==================================
#
#   Defines positions of integration points


This code defines the positions of integration points for different element types in finite element analysis. The elements can be 1D, 2D, or 3D and have different numbers of nodes. The code assigns the positions of the integration points (xi) for different cases based on the number of coordinates (ncoord) and the number of nodes (nelnodes) for each element type. It also considers the number of integration points (npoints) required. For example, for a 2D triangular element with 3 nodes, if 1 integration point is required, then xi is assigned to be the centroid of the triangle (1/3, 1/3). Similarly, for a 2D rectangular element with 4 nodes and 9 integration points, xi is assigned to 9 positions based on Gaussian quadrature rules.



#================= INTEGRATION WEIGHTS ==================================
#
#   Defines integration weights w_i





























